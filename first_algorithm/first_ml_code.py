#preloaded dataset that contains information about terrains and prices in Boston
from sklearn.datasets import load_boston
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split

# the regressor is an algorithm which has, as output, a number that indicates
# the estimate of what we are anticipating like the number of goal of a soccer player

def print_description(dataset):
    #printing a description of the dataset
    print(dataset['DESCR'])

    #printig all the data of the dataset
    for data in dataset['data']:
        print(data)
        print()


def first_code(dataset):

    # matrix which contains the features of the houses in Boston
    X = dataset['data']
    # matrix which contains the price to predict
    y = dataset['target']

    # creating the model
    model = LinearRegression()

    # training the model starting from the data. the model will try to find the pattern between the data
    # the fit must have done only one time before evalute the model. It can ben done more times, but only when
    # the data are too much and, with one fit, we can not do it
    model.fit(X, y)

    # list that contains the predictions generated by the model
    predictions = model.predict(X)

    # it takes in input the real data and the predictions created by the model and, his ouput, is a number that
    # indicates how good is the model. More big it is, less the model is good
    mae = mean_absolute_error(y, predictions)

    print('MAE: '+str(mae))

# this function will show how to train a ml algorithm
def training_function(dataset):
    # matrix which contains the features of the houses in Boston
    X = dataset['data']
    # matrix which contains the price to predict
    y = dataset['target']

    # the train_test_split() function returns a tuple with four elements which will be represented by the four
    # variables declared. With this function we divide the dataset into the dataset for the training and the dataset
    # to test the training
    X_train, X_test, y_train, y_test = train_test_split(X, y)

    model = LinearRegression()
    # we give in input only a part of dataset for the training, with which the model will train
    model.fit(X_train, y_train)

    predict_train = model.predict(X_train)
    predict_test = model.predict(X_test)

    mae_train = mean_absolute_error(y_train, predict_train)
    mae_test = mean_absolute_error(y_test, predict_test)

    print('MAE train: ' + str(mae_train))
    print('MAE test: ' + str(mae_test))


if __name__ == '__main__':
    # load the Boston's dataset into the var dataset
    dataset = load_boston()
    first_code(dataset)
    training_function(dataset)

